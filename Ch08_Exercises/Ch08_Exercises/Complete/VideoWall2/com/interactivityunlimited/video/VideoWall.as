class com.interactivityunlimited.video.VideoWall extends MovieClip {	var nc:NetConnection;	var ns:NetStream;	var theVideo:Video;	var videoSelection:Number;	var videoPlaying:Boolean = false;		var ourBroadcaster:Object;		// our constructor -- automatically called as soon as we call AttachMovie	function VideoWall() {		// First, set this object up to be a broadcaster		ourBroadcaster = new Object();		AsBroadcaster.initialize(ourBroadcaster);				nc = new NetConnection();		nc.connect(null);				ns = new NetStream(nc);		theVideo.attachVideo(ns);				videoSelection = Math.floor(Math.random() * 6) + 1;	// select a movie between 1 and 6		ns.play( "thumbs/Trail2-Video" + videoSelection + ".flv" );			}		public function onEnterFrame() {		if( !videoPlaying ) {			var deltaX:Number = Math.round(_root._xmouse - this._x);			var deltaY:Number = Math.round(_root._ymouse - this._y);			var diff:Number = Math.round(Math.sqrt((deltaX * deltaX) + (deltaY * deltaY)));						if( diff > 80 ) {				diff = 80;			};						this._alpha = (100 - diff);			this._xscale = (100 - (diff/1.5));			this._yscale = (100 - (diff/1.5));		}	}		public function pauseVideo() {		ns.pause( true );	}		public function onRollOver() {		if( !videoPlaying ) {			ns.play( "thumbs/Trail2-Video" + videoSelection + ".flv" );				}	}		public function onPress() {		if( !videoPlaying ) {			ourBroadcaster.broadcastMessage( "selectMovie", "Trail2-Video" + videoSelection + ".flv" );		}	}		public function setVideoPlaying( flag:Boolean ):Void {		videoPlaying = flag;	}		public function isVideoPlaying():Boolean {		return videoPlaying;	}		public function addListener( theListener:Object ):Boolean {		return ourBroadcaster.addListener( theListener );	}		public function removeListener( theListener:Object ):Boolean {		return ourBroadcaster.removeListener( theListener );	}}